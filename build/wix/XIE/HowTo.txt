//////////////////////////////////////////////////////////////////////
// 
// 目次
// 

□ 開発環境
□ メンテナンス要領
□ 多国語化
□ Custom Action のデバッグ
□ インストーラの情報が記述されたレジストリ


//////////////////////////////////////////////////////////////////////
// 
// 開発環境
// 

Windows Installer XML (WiX) toolset
	http://wix.sourceforge.net/
	http://wix.sourceforge.net/downloadv35.html
	http://wix.codeplex.com/releases/view/60102
	file: ProjectAggregator2.msi
	file: Wix35.msi

WiX Edit
	http://wixedit.sourceforge.net/
	file: wixedit-0.7.5.msi


//////////////////////////////////////////////////////////////////////
// 
// メンテナンス要領
// 

----------------------------------------------------------------------
【TODO】

リビジョン更新の際は以下の２か所を更新してください。

・Base.wxs ファイル内の Revision マクロ
・Base.wxs ファイル内の Release マクロ

Release|x86 をビルドすると bin/x86/Release にインストーラが生成されます。

----------------------------------------------------------------------
【MEMO】

・Package 要素の Id
	指定すると警告(warning CNDL1091)が出るので
	プロジェクトのプロパティの Suppress specific warnings で除外しています。
	指定しなければリビジョン更新の際に上書きインストールができません。

・Include ファイル
	本体の wxs から外部ファイルを参照する時 Include タグを使用します。
	その際、インクルードされる側のファイルはコンパイル対象外にしなければなりません。
	そうしなければ警告(warning CNDL0048)が発生します。
	※コンパイル対象外にするには wxs ファイルの [Build Action] を None にします。
	  ソリューションエクスプローラで wxs ファイルを選択して、プロパティウィンドウで変更できます。


//////////////////////////////////////////////////////////////////////
// 
// 多国語化
// 

プロジェクトのプロパティの Build タブの Cultuers to build の覧に以下の識別子を指定してください。
左から日本語、英語(US)、中国語(簡体字)、中国語(繁体字)です。

Cultures to build:  [ ja-jp;en-us;zh-cn;zh-tw; ]


//////////////////////////////////////////////////////////////////////
// 
// Custom Action のデバッグ
// 

カスタムアクション DLL のデバッグ方法について要点を記載します。

※ Visual Studio からプロセスにアタッチする際に管理者権限を要求されます。


1. 環境変数を作成します。

	msiexec.exe が custom action の実行時に下記の変数の値を参照します。
	変数値には CustomAction 要素に指定した Id 名を記入します。

	変数名: MsiBreak
	変数値: (下記の何れか)
	・XIE_Install		: インストール処理
	・XIE_Uninstall		: アンインストール処理


2. カスタムアクション DLL のプロジェクトを開きます。

	├ build
	│├ XIEenvlib
	││├ XIEenvlib.sln	… カスタムアクション DLL のプロジェクト
	├ installer
	│├ XIE
	││├ XIE.sln			… インストーラプロジェクト


3. ブレークポイントを設定します。

	XIEenvlib の XIEenvlib.cpp を開き、デバッグ対象の関数にブレークポイントを設定します。

	◇ インストール処理 (前述 1 で MsiBreak に XIE_Install を指定した場合)

		extern "C" UINT __stdcall InstallEnv(MSIHANDLE hInstall)
	*	{
		:
		}

	◇ アンインストール処理 (前述 1 で MsiBreak に XIE_Uninstall を指定した場合)

		extern "C" UINT __stdcall UninstallEnv(MSIHANDLE hInstall)
	*	{
		:
		}


4. インストーラを実行します。

	XIE.msi を実行します。
	ウィザードを進行して [インストール] ボタンを押した後、下記のメッセージが表示されます。
	"To debug your custom action, attach your debugger to process #### (0xHHHH) and press OK"


5. プロセスにアタッチします。

	前述 1 で開いたプロジェクトで指定のプロセス ID にアタッチします。

	1) [デバッグ] メニューの [プロセスにアタッチ] を選択します。
	2) "プロセスにアタッチ" ダイアログで "すべてのユーザーからのプロセスを表示する" をチェックします。
	3) "選択可能なプロセス" リストから 前述 4 で表示された msiexec.exe のプロセス ID を選択して "アタッチ" を押下します。


6. インストーラを継続する

	前述 4 のメッセージボックスの [OK] ボタンを押して継続します。


7. デバッグを継続する

	前述 1 のプロジェクトで下記のメッセージが表示されるので [継続] を押して続行します。

	『msiexec.exe によってブレークポイントが発生しました』


8. ステップ実行を行う

	ブレークポイントで停止するのでステップ実行を行ってください。


//////////////////////////////////////////////////////////////////////
// 
// インストーラの情報が記述されたレジストリ
// 

インストーラの作成を誤るとインストールが途中で失敗してアンインストールが出来なくなります。
その場合はレジストリ(下記位置)から当該インストーラの情報を手動で削除する必要があります。

\HKEY_LOCAL_MACHINE
├ SOFTWARE
│├ Classes
││├ Installer
│││├ Products
││││├ (32 桁のキー) ← ※1

上記 ※1 のキーの配下を参照して XIE.msi の情報である事を確認してください。

