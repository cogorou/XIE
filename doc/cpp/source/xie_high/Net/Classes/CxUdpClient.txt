/*!
	@file	CxUdpClient.h
	@brief	UDP通信クラス
*/
/*!
	@internal
	@file	CxUdpClient.cpp
	@brief	UDP通信クラス
*/
/*!
	@def	_CXUDPCLIENT_H_INCLUDED_
	@brief	多重インクルード抑制
*/

namespace xie
{
namespace Net
{

//////////////////////////////////////////////////////////////////////
/*!
	@ingroup	group_xie_Net_Classes
	@class		CxUdpClient
	@brief		UDP通信クラス

	@par	Examples:
			@includelineno	CxUdpClient_01.cpp

			@par
			出力結果)
			@include	CxUdpClient_01.txt
*/
// ===================================================================
/*!
	@var	CxUdpClient::m_Tag
	@brief	データ構造
*/
// ===================================================================
/*!
	@fn		CxUdpClient::_Constructor()
	@brief	コンストラクタ用初期化関数
*/
// ===================================================================
/*!
	@fn		CxUdpClient::CxUdpClient()
	@brief	コンストラクタ

	@remarks
			標準のコンストラクタです。\n
			データ構造は既定値でリセットされています。
*/
// ===================================================================
/*!
	@fn		CxUdpClient::CxUdpClient(const CxUdpClient& src)
	@brief	コンストラクタ (Copy Constructor)

	@param[in]		src		複製元

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			指定されたオブジェクトの内容を複製します。\n
			但し、ソケットハンドルは除外します。\n
			複製先のオブジェクトの接続を確立するには、別途 @ref Setup を実行する必要があります。

	@sa
		@ref operator=(const CxUdpClient &src) \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::CxUdpClient(const TxIPAddress& addr, int port)
	@brief	コンストラクタ

	@param[in]		addr	自身のIPアドレス
	@param[in]		port	自身のポート番号 [0~65535]

	@remarks
			指定された値をメンバフィールドに設定して構築します。\n
			接続を確立するには、別途 @ref Setup を実行する必要があります。

	@sa
		@ref Setup \n
		@ref m_Tag \n
		@ref TxUdpClient \n
		@ref TxUdpClient::IPAddress \n
		@ref TxUdpClient::Port \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::CxUdpClient(const TxIPEndPoint& endpoint)
	@brief	コンストラクタ

	@param[in]		endpoint	自身のエンドポイント

	@remarks
			指定された値をメンバフィールドに設定して構築します。\n
			接続を確立するには、別途 @ref Setup を実行する必要があります。

	@sa
		@ref Setup \n
		@ref m_Tag \n
		@ref TxUdpClient \n
		@ref TxUdpClient::IPAddress \n
		@ref TxUdpClient::Port \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::~CxUdpClient()
	@brief	デストラクタ

	@remarks
			このオブジェクトを破棄します。\n
			内部では @ref Dispose を呼び出しています。

	@sa
		@ref Dispose() \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::operator = ( const CxUdpClient& src )
	@brief	代入オペレータ

	@param[in]		src		複製元

	@return	複製後の自身への参照を返します。

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			指定されたオブジェクトの内容を複製します。\n
			但し、ソケットハンドルは除外します。\n
			複製先のオブジェクトの接続を確立するには、別途 @ref Setup を実行する必要があります。

	@sa
		@ref Setup \n
		@ref m_Tag \n
		@ref TxUdpClient \n
		@ref TxUdpClient::Socket \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::operator == ( const CxUdpClient& src ) const
	@brief	比較オペレータ (等価)

	@param[in]		src		比較対象

	@retval	true	一致
	@retval	false	不一致

	@remarks
			データ構造の比較を行います。\n
			ソケットハンドルの違いは無視します。\n

	@sa
		@ref m_Tag \n
		@ref TxUdpClient \n
		@ref TxUdpClient::Socket \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::operator != ( const CxUdpClient& src ) const
	@brief	比較オペレータ (不等価)

	@param[in]		src		比較対象

	@retval	true	不一致
	@retval	false	一致

	@remarks
			データ構造の比較を行います。\n
			ソケットハンドルの違いは無視します。\n

	@sa
		@ref m_Tag \n
		@ref TxUdpClient \n
		@ref TxUdpClient::Socket \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Tag() const
	@brief	データ構造の取得

	@return	自身のデータ構造の複製を返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::TagPtr() const
	@brief	データ構造へのポインタの取得

	@return	内部リソースを管理する構造体へのポインタを返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Setup()
	@brief	初期化

	@remarks
			内部のスレッドを生成します。\n
			生成済みの場合は、一旦解放してから再度生成します。

	@sa
		@ref Dispose \n
		@ref IsValid \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Dispose()
	@brief	解放

	@remarks
			内部スレッドを停止して解放します。\n

	@sa
		@ref Setup \n
		@ref IsValid \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::IsValid() const
	@brief	有効性の検査

	@retval	true	有効
	@retval	false	無効

	@remarks
			以下の条件を満たす場合は有効(true)を返します。\n
			-	ソケットハンドルが無効でないこと。

	@sa
		@ref Setup \n
		@ref Dispose \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Readable(int timeout) const
	@brief	読み込み可否の検査

	@param[in]		timeout		タイムアウト (msec) [-1,0~]

	@retval	true	可能
	@retval	false	不可能

	@remarks
			戻り値が true を返す場合は、データの一部が到達しているか、
			ネットワークが切断された可能性があります。\n
			指定時間内に状態の変化がなければ false を返します。\n
			@a timeout に -1 を指定した場合は状態の変化があるまで待機します。\n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Read(char* buffer, int length, int timeout, TxIPEndPoint& remoteEP) const
	@brief	読み込み

	@param[out]		buffer		読み込み用バッファ
	@param[in]		length		読み込み用バッファのサイズ (bytes) [1~]
	@param[in]		timeout		タイムアウト (msec) [-1,0~]
	@param[in,out]	remoteEP	送信元のエンドポイント (データ取得後に更新されます。) \n

	@return	実際に読み込んだサイズをバイト数で返します。\n
			ネットワークが切断された直後は -1 を返します。\n
			指定時間内に状態の変化がなければ 0 を返します。\n
			@a timeout に -1 を指定した場合は状態の変化があるまで待機します。\n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Writeable(int timeout) const
	@brief	書き込み可否の検査

	@param[in]		timeout		タイムアウト (msec) [-1,0~]

	@retval	true	可能
	@retval	false	不可能

	@remarks
			戻り値が true を返す場合は、データの書き込みが可能であることを意味します。\n
			指定時間内に状態の変化がなければ false を返します。\n
			@a timeout に -1 を指定した場合は状態の変化があるまで待機します。\n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Write(const char* buffer, int length, int timeout, const TxIPEndPoint& remoteEP) const
	@brief	書き込み

	@param[in]		buffer		書き込むデータ
	@param[in]		length		書き込むデータのサイズ (bytes) [1~]
	@param[in]		timeout		タイムアウト (msec) [-1,0~]
	@param[in]		remoteEP	送信先のエンドポイント

	@return	実際に書き込んだサイズをバイト数で返します。\n
			異常があれば -1 を返します。\n
			指定時間内に状態の変化がなければ 0 を返します。\n
			@a timeout に -1 を指定した場合は状態の変化があるまで待機します。\n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Socket() const
	@brief	ソケットハンドルの取得

	@return		ソケットハンドルを返します。\n
				接続が確立していない場合は INVALID_SOCKET (0) を返します。\n

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::IPAddress() const
	@brief	自身のIPアドレスの取得

	@return		現在設定されているIPアドレスを返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::IPAddress(const TxIPAddress& value)
	@brief	自身のIPアドレスの設定

	@param[in]		value	設定値

	@remarks
			接続を確立するには、別途 @ref Setup を実行する必要があります。\n

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Port() const
	@brief	自身のポート番号の取得

	@return		現在設定されているポート番号を返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::Port(int value)
	@brief	自身のポート番号の設定

	@param[in]		value	設定値 [0~65535]

	@remarks
			接続を確立するには、別途 @ref Setup を実行する必要があります。\n

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::EndPoint() const
	@brief	自身のエンドポイントの取得

	@return		現在設定されているIPアドレスとポート番号を TxIPEndPoint 構造体に設定して返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxUdpClient::EndPoint(const TxIPEndPoint& value)
	@brief	自身のエンドポイントの設定

	@param[in]		value	設定値

	@remarks
			接続を確立するには、別途 @ref Setup を実行する必要があります。\n

	@sa
		@ref m_Tag \n
*/

}
}
