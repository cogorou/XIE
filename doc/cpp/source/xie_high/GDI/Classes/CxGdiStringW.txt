/*!
	@file	CxGdiStringW.h
	@brief	オーバレイ図形クラス (文字列(UNICODE))
*/
/*!
	@internal
	@file	CxGdiStringW.cpp
	@brief	オーバレイ図形クラス (文字列(UNICODE))
*/
/*!
	@def	_CXGDISTRINGW_H_INCLUDED_
	@brief	多重インクルード抑制
*/

namespace xie
{
namespace GDI
{

//////////////////////////////////////////////////////////////////////
/*!
	@ingroup	group_xie_GDI_Classes
	@class		CxGdiStringW
	@brief		オーバレイ図形クラス (文字列(UNICODE))

	@todo
			現在、Linux 版には処理を実装していません。
*/
// ===================================================================
/*!
	@var	CxGdiStringW::m_Tag
	@brief	データ構造
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::_Constructor()
	@brief	コンストラクタ用初期化関数
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CxGdiStringW()
	@brief	コンストラクタ

	@remarks
			標準のコンストラクタです。\n
			内部リソースは未確保です。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CxGdiStringW( const CxGdiStringW& src )
	@brief	コンストラクタ (Copy Constructor)

	@param[in]		src		複製元

	@remarks
			指定されたオブジェクトの内容を複製します。\n
			内部では @ref CopyFrom メソッドを呼び出しています。

	@sa
		@ref operator=(const CxGdiStringW &src) \n
		@ref CopyFrom(const IxModule &src) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CxGdiStringW( const CxStringW& src )
	@brief	コンストラクタ (初期値指定)

	@param[in]		src		複製元

	@remarks
			指定されたオブジェクトの内容を複製します。\n
			内部では @ref CopyFrom メソッドを呼び出しています。

	@sa
		@ref operator=(const CxStringW &src) \n
		@ref CopyFrom(const IxModule &src) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::~CxGdiStringW()
	@brief	デストラクタ

	@remarks
			このオブジェクトを破棄します。\n
			内部では @ref Dispose を呼び出しています。

	@sa
		@ref Dispose() \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator = ( const CxGdiStringW& src )
	@brief	代入オペレータ

	@param[in]		src		複製元

	@return	複製後の自身への参照を返します。

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			指定されたオブジェクトの内容を複製します。
			内部では @ref CopyFrom メソッドを呼び出しています。

	@sa
		@ref CopyFrom(const IxModule &src) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator = ( const CxStringW& src )
	@brief	代入オペレータ

	@param[in]		src		複製元

	@return	複製後の自身への参照を返します。

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			指定されたオブジェクトの内容を複製します。
			内部では @ref CopyFrom メソッドを呼び出しています。

	@sa
		@ref CopyFrom(const IxModule &src) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator = ( TxCharCPtrW src )
	@brief	代入オペレータ

	@param[in]		src		複製元

	@return	複製後の自身への参照を返します。

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@sa
		@ref Text \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator == ( const CxGdiStringW& src ) const
	@brief	比較オペレータ (等価)

	@param[in]		src		比較対象

	@retval	true	一致
	@retval	false	不一致

	@remarks
			データ構造の比較を行います。\n
			内部では @ref ContentEquals メソッドを呼び出しています。

	@sa
		@ref ContentEquals(const IxModule &src) const \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator != ( const CxGdiStringW& src ) const
	@brief	比較オペレータ (不等価)

	@param[in]		src		比較対象

	@retval	true	不一致
	@retval	false	一致

	@remarks
			データ構造の比較を行います。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Tag() const
	@brief	データ構造の取得

	@return	自身のデータ構造の複製を返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::TagPtr() const
	@brief	データ構造へのポインタ

	@return	内部リソースを管理する構造体へのポインタを返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator TxCharCPtrW() const
	@brief	キャストオペレータ (先頭アドレス)

	@return	文字列の先頭アドレスを返します。\n
			未確保の場合は NULL を返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::operator CxStringW() const
	@brief	キャストオペレータ (文字列オブジェクト(UNICODE))

	@return	現在設定されている文字列を返します。

	@sa
		@ref m_Tag \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CopyTo(IxModule& dst) const
	@brief	オブジェクトの内容の複製

	@param[in,out]	dst		複製先 \n
							下記のオブジェクトに対応しています。\n
							対応していないオブジェクトが指定された場合は例外を発行します。\n
							- CxStringA (文字列オブジェクト(MBCS)) \n
							- CxStringW (文字列オブジェクト(UNICODE)) \n
							.

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			現在の内容を指定されたオブジェクトに複製して返します。\n
			指定されたオブジェクトの領域は再確保されます。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Dispose()
	@brief	解放

	@remarks
			内部リソースを解放します。\n
			アタッチしている場合はアタッチ解除を行います。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Clone() const
	@brief	クローンの生成

	@return	現在のオブジェクトと同一内容のオブジェクトを返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CopyFrom(const IxModule& src)
	@brief	オブジェクトの内容の複製

	@param[in]		src		複製元

	@exception	CxException	処理に失敗した場合は例外を発行します。Code で原因を特定してください。\n

	@remarks
			指定されたオブジェクトの内容を複製します。\n
			このメソッドは Copy Constructor や代入オペレータから呼び出されます。

	@sa
		@ref CxGdiStringW(const CxGdiStringW &src) \n
		@ref operator=(const CxGdiStringW &src) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::ContentEquals(const IxModule& src) const
	@brief	オブジェクトの内容の比較

	@param[in]		src		比較対象

	@retval	true	一致
	@retval	false	不一致

	@remarks
			指定されたオブジェクトの内容と自身の内容を比較します。\n
			このメソッドは比較オペレータから呼び出されます。

	@sa
		@ref operator==(const CxGdiStringW &src) const \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::IsValid() const
	@brief	有効性の検査

	@retval	true	有効
	@retval	false	無効

	@remarks
			以下の条件を満たす場合は有効(true)を返します。\n
			-	配列の先頭アドレスが NULL でないこと。
			-	要素数が 0 より大きいこと。
			-	要素のサイズが 0 bytes より大きいこと。
			.
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Render(HxModule hcanvas, ExGdiScalingMode mode) const
	@brief	描画

	@param[in]		hcanvas		描画先
	@param[in]		mode		スケーリングモード

	@remarks
			現在の図形を指定されたキャンバスに描画します。。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Location() const
	@brief	描画位置

	@return	この図形の描画位置を返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Location(TxPointD value)
	@brief	描画位置 (設定)

	@param[in]		value		値

	@remarks
			この図形の描画位置を変更します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Bounds() const
	@brief	外接矩形

	@return	この図形を内包する最小の外接矩形を返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Angle() const
	@brief	回転角の取得

	@return
			現在設定されている値を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Angle( double degree )
	@brief	回転角の設定

	@param[in]		degree		設定値 (度) [±180]

	@remarks
			この値は degree 単位で、範囲は ±180 です。\n
			正の値（+）は右回転、負の値（-）は左回転です。			
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Axis() const
	@brief	回転の機軸の取得

	@return
			現在設定されている値を返します。\n
			この値は基準位置からの相対値(±)を示します。

	@sa
		@ref Location() const \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Axis( TxPointD value )
	@brief	回転の機軸の設定

	@param[in]		value		設定値 (基準位置からの相対値(±)) 

	@remarks
			図形の基準位置（Location）に この値を加算した位置が回転中心になります。

	@sa
		@ref Location() const \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::HitTest( TxPointD position, double margin = 2.0 ) const
	@brief	位置判定

	@param[in]		position	指定座標
	@param[in]		margin		判定の許容範囲 [0~] ※±margin の範囲内で判定します。

	@return	指定座標が図形のどの位置にあるかを判定して指標を返します。 
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Modify(HxModule prev_figure, TxPointD prev_position, TxPointD move_position, double margin)
	@brief	図形の編集（位置移動または形状変更）

	@param[in]		prev_figure		編集前の図形
	@param[in]		prev_position	移動前の座標
	@param[in]		move_position	移動後の座標
	@param[in]		margin			判定の許容範囲 [範囲:0~] [既定値:2.0] ※±margin の範囲内で判定します。

	@sa
		HitTest( TxPointD position, double margin ) const \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::BkColor() const
	@brief	背景色

	@return
			現在設定されている値を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::BkColor( TxRGB8x4 value )
	@brief	背景色

	@param[in]		value		設定値

	@remarks
			この値は図形の面（輪郭線によって内包される部分）の描画色を示します。\n
			アルファ値（A フィールド）によって不透明度 [0~255=透明~不透明] を指定できます。\n

	@sa
		@ref PenColor( TxRGB8x4 value ) \n
		@ref BkEnable( bool value ) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::BkEnable() const
	@brief	背景の有効属性

	@retval	true	有効
	@retval	false	無効
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::BkEnable( bool value )
	@brief	背景の有効属性

	@param[in]		value		設定値 [true:有効、false:無効]

	@remarks
			この値が false の時は背景描画が無視されます。\n

	@sa
		@ref BkColor( TxRGB8x4 value ) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenColor() const
	@brief	ペン色

	@return
			現在設定されている値を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenColor( TxRGB8x4 value )
	@brief	ペン色

	@param[in]		value		設定値

	@remarks
			この値は図形の輪郭部分の描画色を示します。\n
			アルファ値（A フィールド）によって不透明度 [0~255=透明~不透明] を指定できます。\n

	@sa
		@ref BkColor( TxRGB8x4 value ) \n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenStyle() const
	@brief	ペン形状

	@return
			現在設定されている値を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenStyle( ExGdiPenStyle value )
	@brief	ペン形状

	@param[in]		value		設定値
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenWidth() const
	@brief	ペン幅

	@return
			現在設定されている値を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::PenWidth( int value )
	@brief	ペン幅

	@param[in]		value		設定値 [1~]
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Param() const
	@brief	オーバレイ図形パラメータの取得

	@return	オーバレイ図形パラメータを返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Param(const TxGdi2dParam& value)
	@brief	オーバレイ図形パラメータの設定

	@param[in]		value		設定値
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Text() const
	@brief	文字列の取得

	@return	現在の設定されている文字列の先頭アドレスを返します。\n
			未確保の場合は NULL を返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Text(TxCharCPtrW value)
	@brief	文字列の設定

	@param[in]		value		設定する文字列

	@remarks
			内部領域を再確保して指定された文字列を複製します。\n
			NULL が指定された場合は内部領域を解放します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Length() const
	@brief	文字列長 [0~]

	@return	現在設定されている文字列の長さ (文字数) を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::X() const
	@brief	描画位置 (X 座標) の取得

	@return	現在の設定されている描画位置 (X 座標) を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::X(double value)
	@brief	描画位置 (X 座標) の設定

	@param[in]		value		設定値
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Y() const
	@brief	描画位置 (Y 座標) の取得

	@return	現在の設定されている描画位置 (Y 座標) を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Y(double value)
	@brief	描画位置 (Y 座標) の設定

	@param[in]		value		設定値
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::FontName() const
	@brief	フォント名の取得

	@return	現在の設定されているフォント名の先頭アドレスを返します。\n
			未確保の場合は NULL を返します。
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::FontName(TxCharCPtrW value)
	@brief	フォント名の設定

	@param[in]		value		設定するフォント名

	@remarks
			内部領域を再確保して指定された文字列を複製します。\n
			NULL が指定された場合は内部領域を解放します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::FontSize() const
	@brief	フォントサイズの取得

	@return	現在の設定されているフォントサイズを返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::FontSize(int value)
	@brief	フォントサイズの設定

	@param[in]		value		設定値 [初期値:12]
*/
// ===================================================================
/*!
	@fn		ExGdiTextAlign CxGdiStringW::Align() const
	@brief	テキスト配置の取得

	@return	現在の設定されているテキスト配置を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::Align(ExGdiTextAlign value)
	@brief	テキスト配置の設定

	@param[in]		value		設定値 [初期値:TopLeft]
*/
// ===================================================================
/*!
	@fn		int CxGdiStringW::CodePage() const
	@brief	テキストのコードページの取得

	@return	現在の設定されているテキスト配置を返します。\n
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::CodePage(int value)
	@brief	テキストのコードページの設定

	@param[in]		value		設定値 [初期値:0]

	@remarks:
			フォントを生成する際に、この値を指定する対応する文字セットに変換します。\n
			現在は、全てのコードページに対応していません。\n
			対応しない場合は O/S 既定の文字セット でフォントを生成します。\n
			
			@par
			対応表) \n
			<table border="1" cellspacing="0" cellpadding="3">
			<tr>
				<td align="center" class="indexkey" width=200>コードページ</td>
				<td align="center" class="indexkey" width=150>文字セット</td>
				<td align="center" class="indexkey">備考</td>
				</tr>
			<tr>
				<td align="center">708~710,720</td>
				<td align="center">Arabic</td>
				<td align="left">アラビア語</td>
				</tr>
			<tr>
				<td align="center">720</td>
				<td align="center">Arabic</td>
				<td align="left">アラビア語</td>
				</tr>
			<tr>
				<td align="center">737</td>
				<td align="center">Greek</td>
				<td align="left">Greek</td>
				</tr>
			<tr>
				<td align="center">775</td>
				<td align="center">Baltic</td>
				<td align="left">Baltic</td>
				</tr>
			<tr>
				<td align="center">850</td>
				<td align="center">Latin1</td>
				<td align="left">Latin1</td>
				</tr>
			<tr>
				<td align="center">852</td>
				<td align="center">Latin2</td>
				<td align="left">Latin2</td>
				</tr>
			<tr>
				<td align="center">855</td>
				<td align="center">Cyrillic</td>
				<td align="left">Cyrillic</td>
				</tr>
			<tr>
				<td align="center">857</td>
				<td align="center">Turkish</td>
				<td align="left">Turkish</td>
				</tr>
			<tr>
				<td align="center">858</td>
				<td align="center">Latin1</td>
				<td align="left">Latin1</td>
				</tr>
			<tr>
				<td align="center">862</td>
				<td align="center">Hebrew</td>
				<td align="left">ヘブライ語</td>
				</tr>
			<tr>
				<td align="center">864</td>
				<td align="center">Arabic</td>
				<td align="left">アラビア語</td>
				</tr>
			<tr>
				<td align="center">866</td>
				<td align="center">Russian</td>
				<td align="left">ロシア語</td>
				</tr>
			<tr>
				<td align="center">869</td>
				<td align="center">Greek</td>
				<td align="left">Greek</td>
				</tr>
			<tr>
				<td align="center">874</td>
				<td align="center">Thai</td>
				<td align="left">タイ語</td>
				</tr>
			<tr>
				<td align="center">932</td>
				<td align="center">ShiftJIS</td>
				<td align="left">日本語</td>
				</tr>
			<tr>
				<td align="center">936</td>
				<td align="center">GB2312</td>
				<td align="left">中国語(簡体字)</td>
				</tr>
			<tr>
				<td align="center">949</td>
				<td align="center">Hanguel</td>
				<td align="left">韓国語(ハングル)</td>
				</tr>
			<tr>
				<td align="center">950</td>
				<td align="center">Big5</td>
				<td align="left">中国語(繁体字)</td>
				</tr>
			<tr>
				<td align="center">1250~1258</td>
				<td align="center">ANSI</td>
				<td align="left">ANSI</td>
				</tr>
			<tr>
				<td align="center">1361</td>
				<td align="center">Johab</td>
				<td align="left">韓国語(Johab)</td>
				</tr>
			<tr>
				<td align="center">10000~10008</td>
				<td align="center">MAC</td>
				<td align="left">MAC</td>
				</tr>
			<tr>
				<td align="center">10010,10017,10021,10029</td>
				<td align="center">MAC</td>
				<td align="left">MAC</td>
				</tr>
			</table>
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::GetParam(TxCharCPtrA name, void* value, TxModel model) const
	@brief	パラメータの取得

	@param[in]		name	パラメータ名称
	@param[out]		value	取得した値を格納する変数へのポインタ
	@param[in]		model	変数の型
*/
// ===================================================================
/*!
	@fn		CxGdiStringW::SetParam(TxCharCPtrA name, const void* value, TxModel model)
	@brief	パラメータの設定

	@param[in]		name	パラメータ名称
	@param[in]		value	設定値が格納された変数へのポインタ
	@param[in]		model	変数の型
*/

}
}
