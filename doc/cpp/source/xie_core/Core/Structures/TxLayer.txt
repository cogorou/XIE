/*!
	@file	TxLayer.h
	@brief	レイヤー構造体
*/
/*!
	@internal
	@file	TxLayer.cpp
	@brief	レイヤー構造体
*/
/*!
	@def	_TXLAYER_H_INCLUDED_
	@brief	多重インクルード抑制
*/

namespace xie
{

//////////////////////////////////////////////////////////////////////
/*!
	@ingroup	group_xie_Core_Structures
	@struct		TxLayer
	@brief		レイヤー構造体
*/
// ===================================================================
/*!
	@var	TxLayer::Address0
	@brief	領域の先頭アドレス (0 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address1
	@brief	領域の先頭アドレス (1 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address2
	@brief	領域の先頭アドレス (2 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address3
	@brief	領域の先頭アドレス (3 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address4
	@brief	領域の先頭アドレス (4 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address5
	@brief	領域の先頭アドレス (5 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address6
	@brief	領域の先頭アドレス (6 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address7
	@brief	領域の先頭アドレス (7 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address8
	@brief	領域の先頭アドレス (8 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address9
	@brief	領域の先頭アドレス (9 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address10
	@brief	領域の先頭アドレス (10 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address11
	@brief	領域の先頭アドレス (11 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address12
	@brief	領域の先頭アドレス (12 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address13
	@brief	領域の先頭アドレス (13 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address14
	@brief	領域の先頭アドレス (14 チャネル目)
*/
// ===================================================================
/*!
	@var	TxLayer::Address15
	@brief	領域の先頭アドレス (15 チャネル目)
*/
// ===================================================================
/*!
	@fn		TxLayer::Default()
	@brief	既定値

	@return	既定値を構造体に設定して返します。
*/
// ===================================================================
/*!
	@fn		TxLayer::TxLayer()
	@brief	コンストラクタ
*/
// ===================================================================
/*!
	@fn		TxLayer::TxLayer(void* addr)
	@brief	コンストラクタ (初期値指定)

	@param[in]		addr		領域の先頭アドレス (0 チャネル目)
*/
// ===================================================================
/*!
	@fn		TxLayer::TxLayer(void** addrs, int count)
	@brief	コンストラクタ (初期値指定)

	@param[in]		addrs		各領域の先頭アドレスが格納された配列
	@param[in]		count		チャネル数
*/
// ===================================================================
/*!
	@fn		TxLayer::operator == (const TxLayer& cmp) const
	@brief	比較オペレータ(等価)

	@param[in]		cmp		比較対象

	@retval		true	一致
	@retval		false	不一致

	@remarks
			指定されたオブジェクトの内容との比較を行います。\n
*/
// ===================================================================
/*!
	@fn		TxLayer::operator != (const TxLayer& cmp) const
	@brief	比較オペレータ(不等価)

	@param[in]		cmp		比較対象

	@retval		true	不一致
	@retval		false	一致

	@remarks
			指定されたオブジェクトの内容との比較を行います。\n
*/
// ===================================================================
/*!
	@fn		TxLayer::operator [] (int index)
	@brief	インデクサ

	@param[in]		index	チャネル指標 [0~(XIE_IMAGE_CHANNELS_MAX-1)]

	@return	指定チャネルのポインタへの参照を返します。
*/
// ===================================================================
/*!
	@fn		TxLayer::operator [] (int index) const
	@brief	インデクサ

	@param[in]		index	チャネル指標 [0~(XIE_IMAGE_CHANNELS_MAX-1)]

	@return	指定チャネルのポインタへの参照を返します。
*/

}
