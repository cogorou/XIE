/*!
	@file	TxLineSegmentI.h
	@brief	線分構造体 (整数版)
*/
/*!
	@internal
	@file	TxLineSegmentI.cpp
	@brief	線分構造体 (整数版)
*/
/*!
	@def	_TXLINESEGMENTI_H_INCLUDED_
	@brief	多重インクルード抑制
*/

namespace xie
{

//////////////////////////////////////////////////////////////////////
/*!
	@ingroup	group_xie_Core_Structures
	@struct		TxLineSegmentI
	@brief		線分構造体 (整数版)
*/
// ===================================================================
/*!
	@var	TxLineSegmentI::X1
	@brief	始点(X)
*/
// ===================================================================
/*!
	@var	TxLineSegmentI::Y1
	@brief	始点(Y)
*/
// ===================================================================
/*!
	@var	TxLineSegmentI::X2
	@brief	終点(X)
*/
// ===================================================================
/*!
	@var	TxLineSegmentI::Y2
	@brief	終点(Y)
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::Default()
	@brief	既定値

	@return	既定値を構造体に設定して返します。
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::TxLineSegmentI()
	@brief	コンストラクタ
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::TxLineSegmentI(int x1, int y1, int x2, int y2)
	@brief	コンストラクタ (初期値指定)

	@param[in]		x1		始点(X)
	@param[in]		y1		始点(Y)
	@param[in]		x2		終点(X)
	@param[in]		y2		終点(Y)
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::TxLineSegmentI(TxPointI st, TxPointI ed)
	@brief	コンストラクタ (初期値指定)

	@param[in]		st		始点
	@param[in]		ed		終点
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::operator == (const TxLineSegmentI& cmp) const
	@brief	比較オペレータ(等価)

	@param[in]		cmp		比較対象

	@retval		true	一致
	@retval		false	不一致

	@remarks
			指定されたオブジェクトの内容との比較を行います。\n
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::operator != (const TxLineSegmentI& cmp) const
	@brief	比較オペレータ(不等価)

	@param[in]		cmp		比較対象

	@retval		true	不一致
	@retval		false	一致

	@remarks
			指定されたオブジェクトの内容との比較を行います。\n
*/
// ===================================================================
/*! 
	@fn		TxLineSegmentI::operator TxLineSegmentD () const
	@brief	キャストオペレータ

	@return	現在の内容を TxLineSegmentD 構造体に格納して返します。
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::Point1() const
	@brief	端点 1 の取得

	@return	現在設定されている端点 1 を返します。
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::Point1(const TxPointI& value)
	@brief	端点 1 の設定

	@param[in]		value		設定値

	@remarks
			端点 1 を設定します。
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::Point2() const
	@brief	端点 2 の取得

	@return	現在設定されている端点 2 を返します。
*/
// ===================================================================
/*!
	@fn		TxLineSegmentI::Point2(const TxPointI& value)
	@brief	端点 2 の設定

	@param[in]		value		設定値

	@remarks
			端点 2 を設定します。
*/
// ===================================================================
/*! 
	@fn		TxLineSegmentI::ToLine () const  
	@brief	直線への変換

	@return	この線分上を平行に通る直線を返します。
*/

}
