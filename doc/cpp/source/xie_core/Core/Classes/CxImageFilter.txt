/*!
	@file	CxImageFilter.h
	@brief	画像オブジェクトフィルタ
*/
/*!
	@internal
	@file	CxImageFilter.cpp
	@brief	画像オブジェクトフィルタ
*/
/*!
	@def	_CXIMAGEFILTER_H_INCLUDED_
	@brief	多重インクルード抑制
*/

namespace xie
{

//////////////////////////////////////////////////////////////////////
/*!
	@ingroup	group_xie_Core_Classes
	@class		CxImageFilter
	@brief		画像オブジェクトフィルタ

	このクラスは、画像オブジェクトを加工する機能を集約しています。\n
	通常は、出力先となる画像オブジェクトの Filter メソッドを介してこのクラスのインスタンスを生成し、
	各メソッドを実行します。\n

	各メソッドは、@ref hDst メンバフィールドに設定されたオブジェクトを加工することを意味します。

	@par	Examples:
@code
	xie::CxImage src(640, 480, xie::TxModel::F64(1), 3);
	xie::CxImage val(640, 480, xie::TxModel::S32(1), 3);
	xie::CxImage dst;

	// src,val の初期化.
	// :

	// dst の加工.
	dst.Filter().Mul(src, val);
@endcode
	@par

	@sa
		@ref CxImage \n
		@ref CxImage::Filter() \n
*/
// ===================================================================
/*!
	@var	CxImageFilter::hDst
	@brief	出力先のオブジェクト
*/
// ===================================================================
/*!
	@fn		CxImageFilter::hMask
	@brief	マスクオブジェクトのハンドル
*/
// ===================================================================
/*!
	@fn		CxImageFilter::CxImageFilter()
	@brief	コンストラクタ
*/
// ===================================================================
/*!
	@fn		CxImageFilter::CxImageFilter(HxModule hdst, HxModule hmask)
	@brief	コンストラクタ

	@param[in]		hdst	出力先のオブジェクト
	@param[in]		hmask	マスクオブジェクトのハンドル

	@sa
		@ref hDst \n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::CxImageFilter(const CxImageFilter& src)
	@brief	コンストラクタ (Copy Constructor)

	@param[in]		src		複製元

	@sa
		@ref operator=(const CxImageFilter &src) \n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::~CxImageFilter()
	@brief	デストラクタ
*/
// ===================================================================
/*!
	@fn		CxImageFilter::operator = ( const CxImageFilter& src )
	@brief	代入オペレータ

	@param[in]		src		複製元

	@return	複製後の自身への参照を返します。
*/
// ===================================================================
/*!
	@fn		CxImageFilter::operator == ( const CxImageFilter& src ) const
	@brief	比較オペレータ (等価)

	@param[in]		src		比較対象

	@retval	true	一致
	@retval	false	不一致
*/
// ===================================================================
/*!
	@fn		CxImageFilter::operator != ( const CxImageFilter& src ) const
	@brief	比較オペレータ (不等価)

	@param[in]		src		比較対象

	@retval	true	不一致
	@retval	false	一致
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Cast(HxModule hsrc)
	@brief	要素のコピー (キャスト)

	@param[in]		hsrc			入力

	@remarks
			各要素の値を代入します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size が一致していること。
				-	入出力の Model.Size が一致していること。
				-	入出力の Model.Pack と Channels が一致していること。\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Copy(HxModule hsrc, double scale)
	@brief	要素のコピー

	@param[in]		hsrc			入力
	@param[in]		scale			スケーリングする際の倍率 [0=元の値をそのまま複製する、その他=元の画素値に指定値を乗算する] \n
									@ref Axi::CalcScale "Axi::CalcScale(src.Model.Type, src.Depth, dst.Model.Type, dst.Depth)" で求めることができます。\n

	@remarks
			各要素の値を代入します。(下式 1) \n
			@a scale が 0 または 1 以外の時はレンジ変換して代入します。(下式 2) \n

			@par
			式1) dst<sub>y,x</sub> = src<sub>y,x</sub>  \n
			\n

			@par
			式2) dst<sub>y,x</sub> = src<sub>y,x</sub> * scale  \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size が一致していること。
				.
				\n

			@par
			要素モデルのパック数及びチャネル数に応じた処理: \n
				-	入出力の（パック数 * チャネル数）が少ない方で巡回して複製する。(※巡回規則については後述する。)
				-	入力が 1 パック且つ 1 チャネルの場合は、出力の全チャネルの全フィールドへ複製する。
				-	入力が 3 パック以上で出力が 1 パック且つ入出力のチャネル数が一致している場合は、濃淡化する。
				-	入力が 3 チャネル以上で出力が 1 チャネル且つ入出力のパック数が一致している場合は、濃淡化する。
				.
				\n

			@par
			巡回規則: \n
			入出力の（パック数 * チャネル数）が少ない方で巡回して複製する際、
			下式によって求められたチャネル指標とフィールド指標で走査します。\n
			\n
			式１） チャネル指標 = 巡回指標 / パック数 \n
			式２） フィールド指標 = 巡回指標 % パック数 \n
			\n
			例えば、出力が 5 パック * 1 チャネル、入力が 2 パック * 2 チャネル の場合、
			巡回する回数は 4 (min(5*1,2*2)) となり、各チャネルとフィールドは下表のように走査します。\n
			\n
			<table border="1" cellspacing="0" cellpadding="3">
			<tr>
				<td class="indexkey" ROWSPAN=2 align="center">巡回指標</td>
				<td class="indexkey" COLSPAN=2 align="center">出力</td>
				<td class="indexkey" COLSPAN=2 align="center">入力</td>
				<td class="indexkey" ROWSPAN=2 align="center">備考</td>
				</tr>
			<tr>
				<td class="indexkey" align="center">Channel</td>
				<td class="indexkey" align="center">Field</td>
				<td class="indexkey" align="center">Channel</td>
				<td class="indexkey" align="center">Field</td>
				</tr>
			<tr>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td>複製</td>
				</tr>
			<tr>
				<td align="center">1</td>
				<td align="center">0</td>
				<td align="center">1</td>
				<td align="center">0</td>
				<td align="center">1</td>
				<td>複製</td>
				</tr>
			<tr>
				<td align="center">2</td>
				<td align="center">0</td>
				<td align="center">2</td>
				<td align="center">1</td>
				<td align="center">0</td>
				<td>複製</td>
				</tr>
			<tr>
				<td align="center">3</td>
				<td align="center">0</td>
				<td align="center">3</td>
				<td align="center">1</td>
				<td align="center">1</td>
				<td>複製</td>
				</tr>
			<tr>
				<td align="center">-</td>
				<td align="center">0</td>
				<td align="center">4</td>
				<td align="center">-</td>
				<td align="center">-</td>
				<td>対象外</td>
				</tr>
			</table>
*/
// ===================================================================
/*!
	@fn		CxImageFilter::CopyEx(HxModule hsrc, int index, int count)
	@brief	要素のコピー (フィールド指定)

	@param[in]		hsrc			入力
	@param[in]		index			フィールド指標 [0~]
	@param[in]		count			フィールド数 [1~]

	@remarks
			各要素の指定フィールドを代入します。\n

			@par
			式) dst<sub>y,x</sub>[k] = src<sub>y,x</sub>[k+index] \n
			\n
			※ k=0~(count-1) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size 及び Channels が、それぞれ一致していること。
				-	index が 0 以上であること。\n
				-	count が 1 以上であること。\n
				-	出力の Model.Pack が count 以上であること。
				-	入力の Model.Pack が (index+count) 以上であること。
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::RgbToBgr(HxModule hsrc, double scale)
	@brief	RGB/BGR の相互変換

	@param[in]		hsrc			入力
	@param[in]		scale			スケーリングする際の倍率 [0=元の値をそのまま複製する、その他=元の画素値に指定値を乗算する] \n
									@ref Axi::CalcScale "Axi::CalcScale(src.Model.Type, src.Depth, dst.Model.Type, dst.Depth)" で求めることができます。\n

	@remarks
			各要素の値を RGB から BGR へ変換(または BGR から RGBへ変換)して代入します。\n

			@par
			処理可能な条件:
				-	入出力の Size が一致していること。
				-	入出力の Model.Pack と Channels が下表１の条件を満たすこと。\n
				.
				\n

			@par
			表１) 入出力の要素モデルのパック数とチャネル数の条件
			<table border="1" cellspacing="0" cellpadding="3">
			<tr>
				<td class="indexkey" COLSPAN=2>出力</td>
				<td class="indexkey" COLSPAN=2>入力</td>
				<td class="indexkey" ROWSPAN=2>備考</td>
				</tr>
			<tr>
				<td class="indexkey">Channels</td>
				<td class="indexkey">Pack</td>
				<td class="indexkey">Channels</td>
				<td class="indexkey">Pack</td>
				</tr>
			<tr>
				<td>1</td>
				<td>3,4</td>
				<td>1</td>
				<td>3,4</td>
				<td>入出力の何れか小さい方のパック数を適用する。</td>
				</tr>
			<tr>
				<td>3,4</td>
				<td>1</td>
				<td>1</td>
				<td>3,4</td>
				<td>出力のチャネル数と入力のパック数の何れか小さい方を適用する。</td>
				</tr>
			<tr>
				<td>1</td>
				<td>3,4</td>
				<td>3,4</td>
				<td>1</td>
				<td>出力のパック数と入力のチャネル数の何れか小さい方を適用する。</td>
				</tr>
			<tr>
				<td>3/4</td>
				<td>1</td>
				<td>3/4</td>
				<td>1</td>
				<td>入出力の何れか小さい方のチャネル数を適用する。</td>
				</tr>
			</table>

	@sa
		Axi::CalcScale \n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Compare(HxModule hsrc, HxModule hcmp, double error_range)
	@brief	比較

	@param[in]		hsrc			比較対象(左辺値)
	@param[in]		hcmp			比較対象(右辺値)
	@param[in]		error_range		誤差範囲 \n
									※各要素の差が ±error_range 以内の場合は一致と判断します。 \n

	@remarks
			各要素の値を比較して出力先のオブジェクトに格納します。\n
			一致する要素は 0 、一致しない要素は 1 が格納されます。\n

			@par
			式) dst<sub>y,x</sub> = (src<sub>y,x</sub> == cmp<sub>y,x</sub>) ? 0 : 1 \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size が一致していること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				-	出力の Model.Type が ExType (U8) であること。\n
				.
				\n

			@par
			要素モデルのパック数及びチャネル数に応じた処理: \n
				-	入出力の（パック数 * チャネル数）が少ない方で巡回して処理する。(※巡回規則については後述する。)
				-	入力が 1 パック且つ 1 チャネルの場合は、出力の全チャネルの全フィールドへ書き込む。
				.
				\n

			@par
			巡回規則: \n
			入出力の（パック数 * チャネル数）が少ない方で巡回して処理する際、
			下式によって求められたチャネル指標とフィールド指標で走査します。\n
			\n
			式１） チャネル指標 = 巡回指標 / パック数 \n
			式２） フィールド指標 = 巡回指標 % パック数 \n
			\n
			例えば、出力が 5 パック * 1 チャネル、入力が 2 パック * 2 チャネル の場合、
			巡回する回数は 4 (min(5*1,2*2)) となり、各チャネルとフィールドは下表のように走査します。\n
			\n
			<table border="1" cellspacing="0" cellpadding="3">
			<tr>
				<td class="indexkey" ROWSPAN=2 align="center">巡回指標</td>
				<td class="indexkey" COLSPAN=2 align="center">出力</td>
				<td class="indexkey" COLSPAN=2 align="center">入力</td>
				<td class="indexkey" ROWSPAN=2 align="center">備考</td>
				</tr>
			<tr>
				<td class="indexkey" align="center">Channel</td>
				<td class="indexkey" align="center">Field</td>
				<td class="indexkey" align="center">Channel</td>
				<td class="indexkey" align="center">Field</td>
				</tr>
			<tr>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td align="center">0</td>
				<td>書き込み</td>
				</tr>
			<tr>
				<td align="center">1</td>
				<td align="center">0</td>
				<td align="center">1</td>
				<td align="center">0</td>
				<td align="center">1</td>
				<td>書き込み</td>
				</tr>
			<tr>
				<td align="center">2</td>
				<td align="center">0</td>
				<td align="center">2</td>
				<td align="center">1</td>
				<td align="center">0</td>
				<td>書き込み</td>
				</tr>
			<tr>
				<td align="center">3</td>
				<td align="center">0</td>
				<td align="center">3</td>
				<td align="center">1</td>
				<td align="center">1</td>
				<td>書き込み</td>
				</tr>
			<tr>
				<td align="center">-</td>
				<td align="center">0</td>
				<td align="center">4</td>
				<td align="center">-</td>
				<td align="center">-</td>
				<td>対象外</td>
				</tr>
			</table>
*/
// ===================================================================
/*!
	@fn		CxImageFilter::ColorMatrix(HxModule hsrc, HxModule hmatrix)
	@brief	カラー行列フィルタ

	@param[in]		hsrc			入力
	@param[in]		hmatrix			カラー行列 (3x3 の行列) [F64(1)] \n
									※ @ref xie::CxMatrix を指定してください。\n

	@remarks
			入力の各要素(1x3 の行列)とカラー行列(3x3 の行列)の積を求め、出力先のオブジェクトに格納します。\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力の Channels (または Model.Pack) が 3 または 4 であること。\n
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n

	@sa
		@ref xie::Effectors::CxMonochrome \n
		@ref xie::Effectors::CxRgbConverter \n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Affine(HxModule hsrc, HxModule hmatrix, int interpolation)
	@brief	アフィン変換

	@param[in]		hsrc			入力
	@param[in]		hmatrix			変換行列 \n
									※ @ref xie::CxMatrix を指定してください。\n
	@param[in]		interpolation	濃度補間方法 [0:最近傍、1:双方向、2:平均値]

	@remarks
			指定された変換行列に従って入力の各要素の座標を変換し、各要素の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>dy,dx</sub> = src<sub>y,x</sub> \n
			\n
			dx = x * matrix<sub>0,0</sub> + y * matrix<sub>0,1</sub> + matrix<sub>0,2</sub> \n
			dy = x * matrix<sub>1,0</sub> + y * matrix<sub>1,1</sub> + matrix<sub>1,2</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Model, Channels が、それぞれ一致していること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n

			@par
			留意事項:
				-	入出力の Size の違いは無視します。\n
				-	出力先(dy,dx)に対応する座標が範囲外の場合は、出力先には何も書き込みません。\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mirror(HxModule hsrc, int mode)
	@brief	ミラー反転

	@param[in]		hsrc			入力
	@param[in]		mode			処理モード [0:反転なし、1:X方向、2:Y方向、3:XY方向]

	@remarks
			入力の各要素の座標をミラー反転し、各要素の値を出力先のオブジェクトに格納します。\n
			引数の @a mode によって 出力先の座標 (dx,dy) が異なります。\n

			@par
			式) dst<sub>dy,dx</sub> = src<sub>y,x</sub> \n
			\n
			mode = 1) dy = y; dx = src.Width - x - 1; \n
			mode = 2) dx = x; dy = src.Height - y - 1; \n
			mode = 3) dx = src.Width - x - 1; dy = src.Height - y - 1; \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が、それぞれ一致していること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
					\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Rotate(HxModule hsrc, int mode)
	@brief	回転

	@param[in]		hsrc			入力
	@param[in]		mode			処理モード [0:0度、-1:-90度、+1:+90度、+2:180度]

	@remarks
			入力の各要素の座標を回転し、各要素の値を出力先のオブジェクトに格納します。\n
			引数の @a mode によって 出力先の座標 (dx,dy) が異なります。\n

			@par
			式) dst<sub>dy,dx</sub> = src<sub>y,x</sub> \n
			\n
			mode = -1) dx = y; dy = src.Width - x - 1; \n
			mode = +1) dy = x; dx = src.Height - y - 1; \n
			mode = +2) dx = src.Width - x - 1; dy = src.Height - y - 1; \n
			\n

			@par
			処理可能な条件:
				-	入出力の Model, Channels が、それぞれ一致していること。\n
				-	入出力の Size が下記の条件で一致していること。
					- mode = -1 : src.Width == dst.Height 且つ src.Height == dst.Width \n
					- mode = +1 : src.Width == dst.Height 且つ src.Height == dst.Width \n
					- mode = +2 : src.Size == dst.Size \n
					.
					\n
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
					\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Transpose(HxModule hsrc)
	@brief	転置

	@param[in]		hsrc			入力

	@remarks
			入力の各要素の座標を転置し、各要素の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>x,y</sub> = src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Model, Channels が、それぞれ一致していること。\n
				-	入力の Width と 出力の Height が一致していること。
				-	入力の Height と 出力の Width が一致していること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
					\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Scale(HxModule hsrc, double sx, double sy, int interpolation)
	@brief	サイズ変更

	@param[in]		hsrc			入力
	@param[in]		sx				X方向の倍率 (1.0 が等倍です。)
	@param[in]		sy				Y方向の倍率 (1.0 が等倍です。)
	@param[in]		interpolation	濃度補間方法 [0:最近傍、1:双方向、2:平均値]

	@remarks
			スケール変換行列に従って入力の各要素の座標を変換し、各要素の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>dy,dx</sub> = src<sub>y,x</sub> \n
			\n
			dx = x * matrix<sub>0,0</sub> + y * matrix<sub>0,1</sub> + matrix<sub>0,2</sub> \n
			dy = x * matrix<sub>1,0</sub> + y * matrix<sub>1,1</sub> + matrix<sub>1,2</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Model, Channels が一致すること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n

			@par
			留意事項:
				-	入出力の Size の違いは無視します。\n
				-	出力先(dy,dx)に対応する座標が範囲外の場合は、出力先には何も書き込みません。\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Math(HxModule hsrc, ExMath type)
	@brief	数理関数

	@param[in]		hsrc			入力
	@param[in]		type			種別

	@remarks
			入力の各要素を指定の数理関数で計算して、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = f( src<sub>y,x</sub> ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
					\n
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Not(HxModule hsrc)
	@brief	反転

	@param[in]		hsrc			入力

	@remarks
			入力の各要素を反転して、出力先のオブジェクトに格納します。\n
			符号なしの整数の場合はビット反転します。それ以外は符号反転します。\n

			@par
			<b>符号なし整数の場合)</b> \n
			式１) dst<sub>y,x</sub> = ~ src<sub>y,x</sub> \n
			\n

			@par
			<b>符号付き整数または実数の場合)</b> \n
			式２) dst<sub>y,x</sub> = -1 * src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Add(HxModule hsrc, HxModule hval)
	@brief	加算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の加算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> + val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Add(HxModule hsrc, double value)
	@brief	加算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の加算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> + value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mul(HxModule hsrc, HxModule hval)
	@brief	乗算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の乗算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> * val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mul(HxModule hsrc, double value)
	@brief	乗算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の乗算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> * value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Sub(HxModule hsrc, HxModule hval)
	@brief	減算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の減算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> - val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Sub(HxModule hsrc, double value)
	@brief	減算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の減算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> - value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Sub(double value, HxModule hsrc)
	@brief	減算

	@param[in]		value			指定値(左辺値)
	@param[in]		hsrc			入力(右辺値)

	@remarks
			指定値と入力の各要素の減算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = value - src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Div(HxModule hsrc, HxModule hval)
	@brief	除算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の除算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> / val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Div(HxModule hsrc, double value)
	@brief	除算

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の除算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> / value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Div(double value, HxModule hsrc)
	@brief	除算

	@param[in]		value			指定値(左辺値)
	@param[in]		hsrc			入力(右辺値)

	@remarks
			指定値と入力の各要素の除算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = value / src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mod(HxModule hsrc, HxModule hval)
	@brief	剰余

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の剰余演算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> % val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mod(HxModule hsrc, double value)
	@brief	剰余

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の剰余演算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> % value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Mod(double value, HxModule hsrc)
	@brief	剰余

	@param[in]		value			指定値(左辺値)
	@param[in]		hsrc			入力(右辺値)

	@remarks
			指定値と入力の各要素の剰余演算を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = value % src<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Pow(HxModule hsrc, HxModule hval)
	@brief	累乗

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の累乗を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = pow( src<sub>y,x</sub> , val<sub>y,x</sub> ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Pow(HxModule hsrc, double value)
	@brief	累乗

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の累乗を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = pow( src<sub>y,x</sub> , value ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Pow(double value, HxModule hsrc)
	@brief	累乗

	@param[in]		value			指定値(左辺値)
	@param[in]		hsrc			入力(右辺値)

	@remarks
			指定値と入力の各要素の累乗を行い、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = pow( value , src<sub>y,x</sub> ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Atan2(HxModule hsrc, HxModule hval)
	@brief	逆正接

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の逆正接を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = atan2( src<sub>y,x</sub> , val<sub>y,x</sub> ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Atan2(HxModule hsrc, double value)
	@brief	逆正接

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の逆正接を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = atan2( src<sub>y,x</sub> , value ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Atan2(double value, HxModule hsrc)
	@brief	逆正接

	@param[in]		value			指定値(左辺値)
	@param[in]		hsrc			入力(右辺値)

	@remarks
			指定値と入力の各要素の逆正接を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = atan2( value , src<sub>y,x</sub> ) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Diff(HxModule hsrc, HxModule hval)
	@brief	差分

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の差分を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = | src<sub>y,x</sub> - val<sub>y,x</sub> | \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Diff(HxModule hsrc, double value)
	@brief	差分

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の差分を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = | src<sub>y,x</sub> - value | \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Max(HxModule hsrc, HxModule hval)
	@brief	比較演算(大なり)

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の比較演算を行い大きい方の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = (src<sub>y,x</sub> &gt; val<sub>y,x</sub>) ? src<sub>y,x</sub> : val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Max(HxModule hsrc, double value)
	@brief	比較演算(大なり)

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の比較演算を行い大きい方の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = (src<sub>y,x</sub> &gt; value) ? src<sub>y,x</sub> : value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Min(HxModule hsrc, HxModule hval)
	@brief	比較演算(小なり)

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の比較演算を行い小さい方の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = (src<sub>y,x</sub> &lt; val<sub>y,x</sub>) ? src<sub>y,x</sub> : val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Min(HxModule hsrc, double value)
	@brief	比較演算(小なり)

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の比較演算を行い小さい方の値を出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = (src<sub>y,x</sub> &lt; value) ? src<sub>y,x</sub> : value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32, F32, F64) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::And(HxModule hsrc, HxModule hval)
	@brief	論理積

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の論理積を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> &amp; val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::And(HxModule hsrc, unsigned int value)
	@brief	論理積

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の論理積を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> &amp; value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Nand(HxModule hsrc, HxModule hval)
	@brief	否定論理積

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の否定論理積を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = ~(src<sub>y,x</sub> &amp; val<sub>y,x</sub>) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Nand(HxModule hsrc, unsigned int value)
	@brief	否定論理積

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の否定論理積を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = ~(src<sub>y,x</sub> &amp; value) \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Or(HxModule hsrc, HxModule hval)
	@brief	論理和

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の論理和を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> | val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Or(HxModule hsrc, unsigned int value)
	@brief	論理和

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の論理和を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> | value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Xor(HxModule hsrc, HxModule hval)
	@brief	排他的論理和

	@param[in]		hsrc			入力(左辺値)
	@param[in]		hval			入力(右辺値)

	@remarks
			入力の各要素の排他的論理和を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> ^ val<sub>y,x</sub> \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/
// ===================================================================
/*!
	@fn		CxImageFilter::Xor(HxModule hsrc, unsigned int value)
	@brief	排他的論理和

	@param[in]		hsrc			入力(左辺値)
	@param[in]		value			指定値(右辺値)

	@remarks
			入力の各要素と指定値の論理和を求め、出力先のオブジェクトに格納します。\n

			@par
			式) dst<sub>y,x</sub> = src<sub>y,x</sub> ^ value \n
			\n

			@par
			処理可能な条件:
				-	入出力の Size, Model, Channels が一致すること。
				-	入力(左辺値)の Model.Type が下記の何れかであること。\n
					- ExType (U8, U16, U32, S8, S16, S32) \n
					.
				.
				\n
*/

}
